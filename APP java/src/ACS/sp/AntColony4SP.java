/**
 * Pure Java console application.
 * This application demonstrates console I/O.
 *
 * This file was automatically generated by
 * Omnicore CodeGuide.
 */

package ACS.sp;

import java.util.*;


public class AntColony4SP extends AntColony4TSP
{
    private int[] m_nodesInZ = null;
    
    private static final double L = 0.1;
    
    public AntColony4SP(AntGraph graph, int[] nodesInZ, int nAnts, int nIterations)
    {
        super(graph, nAnts, nIterations);
                
        m_nodesInZ = nodesInZ;
        
        // add pheromones to arcs that go from nodes in Z
        for (int i = 0; i < m_nodesInZ.length; i++)
            for(int j = i + 1; j < m_nodesInZ.length; j++)
            {
                int r = m_nodesInZ[i];
                int s = m_nodesInZ[j];
                
                m_graph.updateTau(r,s, (1 + L) * m_graph.tau(r,s));
            
            
            }
    }
                    
    protected Ant[] createAnts(AntGraph graph, int nAnts)
    {
        Random ran = new Random(System.currentTimeMillis());
       
        
        Ant4SP.reset();
        Ant4SP.setAntColony(this);
        Ant4SP ant[] = new Ant4SP[nAnts];
        int nCount = 0;
        for(int i = 0; i < nAnts; i++)
        {
            int nIndex = nCount;
            nCount++;
            if(nCount == m_nodesInZ.length)
                nCount = 0;
            
            ant[i] = new Ant4SP(m_nodesInZ[nIndex], m_nodesInZ, this);
        }
        
        return ant;
    }
    
    @SuppressWarnings("empty-statement")
    
    //mise a jour globale des pheromones
    protected void globalUpdatingRule()
    {
       
        
        
        double dEvaporation = 0;
        double dDeposition  = 0;
        
     
                
        for(int r = 0; r < m_graph.nodes(); r++)
        {
            for(int s = 0; s < m_graph.nodes(); s++)
            {
                if(r != s)
                {
                    
                    
                    
                  
                    dEvaporation = ((double)1 - A) * m_graph.tau(r,s);
                        
                    double deltaTau =  ((double)1 / Ant4TSP.s_dBestPathValue) * (double)Ant4TSP.s_bestPath[r][s];
                        
           
                    dDeposition  = A * deltaTau;
                    
                   
                     int i ;
                    for (i = 0; i < m_nodesInZ.length && s != m_nodesInZ[i]; i++);
                    
                    if(i == m_nodesInZ.length)
                        dEvaporation -= A * deltaTau;
                    
                    m_graph.updateTau(r, s, dEvaporation + dDeposition);
                }
            }
        } 
     }
}
